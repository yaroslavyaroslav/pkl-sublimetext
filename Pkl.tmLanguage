<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>name</key>
  <string>Pkl</string>
  <key>scopeName</key>
  <string>source.pkl</string>
  <key>fileTypes</key>
  <array>
    <string>pkl</string>
    <string>pcf</string>
  </array>
  <key>foldingStartMarker</key>
  <string>\{</string>
  <key>foldingStopMarker</key>
  <string>}</string>
  <key>uuid</key>
  <string>0598575b-33f4-42c1-b797-5b93a6cfc03a</string>
  <key>patterns</key>
  <array>
    <dict>
      <key>name</key>
      <string>constant.character.language.pkl</string>
      <key>match</key>
      <string>\b(true|false|null)\b</string>
    </dict>
    <dict>
      <key>name</key>
      <string>comment.line.pkl</string>
      <key>match</key>
      <string>//.*</string>
    </dict>
    <dict>
      <key>name</key>
      <string>comment.block.pkl</string>
      <key>begin</key>
      <string>/\*</string>
      <key>end</key>
      <string>\*/</string>
    </dict>
    <dict>
      <key>name</key>
      <string>storage.modifier.pkl</string>
      <key>match</key>
      <string>\b(hidden|local|abstract|external|open|in|out|amends|extends|fixed|const)\b</string>
    </dict>
    <dict>
      <key>name</key>
      <string>keyword.pkl</string>
      <key>match</key>
      <string>\b(amends|as|extends|function|is|let|read|read\?|import|throw|trace)\b</string>
    </dict>
    <dict>
      <key>name</key>
      <string>keyword.control.pkl</string>
      <key>match</key>
      <string>\b(if|else|when|for|import|new)\b</string>
    </dict>
    <dict>
      <key>name</key>
      <string>constant.numeric.pkl</string>
      <key>match</key>
      <string>(?x:               # extended mode
  \b
  (?:
    0x[\da-fA-F]+  # 1 or more hex literal
    |
    0b[0-1]+       # 1 or more binary literal
    |
    \d+            # 1 or more decimal literal
  )
  \b
)</string>
    </dict>
    <dict>
      <key>name</key>
      <string>constant.numeric.pkl</string>
      <key>match</key>
      <string>(?x:
  \b
  (?:
    \d*                 # 0 or more digits
    \.                  # dot literal
    \d+                 # 1 or mor digits
    (?:[eE][+-]?\d+)?   # optional exponent
    |                   # OR
    \d+                 # 1 or more digits
    [eE][+-]?\d+        # exponent
  )
  \b
)</string>
    </dict>
    <dict>
      <key>name</key>
      <string>keyword.operator.pkl</string>
      <key>match</key>
      <string>(?x:
  # MATH
  \+    # add
  |
  -     # minus
  |
  \*    # multiply
  |
  /     # divide
  |
  ~/    # integer divide
  |
  %     # modulo
  |
  \*\*  # power
  |
  &gt;     # greater than
  |
  &gt;=    # greater than or equals
  |
  &lt;     # less than
  |
  &lt;=    # less than or equals
  |
  ==    # equals
  |
  !=    # not equals

  # LOGICAL
  |
  !     # unary not
  |
  &amp;&amp;    # and
  |
  \|\|  # or
  |

  # MISCELLANEOUS
  \|&gt;   # function pipe
  |
  \?\?  # nullish coalesce
  |
  !!    # non-null assertion
  |
  =     # assignment
  |
  -&gt;    # lambda arrow
  |
  \|    # type union
)</string>
    </dict>
    <dict>
      <key>name</key>
      <string>variable.language.pkl</string>
      <key>match</key>
      <string>\b(this|module|outer|super)\b</string>
    </dict>
    <dict>
      <key>name</key>
      <string>support.type.pkl</string>
      <key>match</key>
      <string>\b(unknown|never)\b</string>
    </dict>
    <dict>
      <key>name</key>
      <string>meta.brace.pkl</string>
      <key>match</key>
      <string>[(){}\[\]]</string>
    </dict>
    <dict>
      <key>name</key>
      <string>keyword.class.pkl</string>
      <key>match</key>
      <string>\b(class|typealias)\b</string>
    </dict>
    <dict>
      <key>name</key>
      <string>punctuation.pkl</string>
      <key>match</key>
      <string>(?x:
  \.\?  # optional chain
  |
  \.    # member access
  |
  ;     # semicolon
  |
  :     # colon
)</string>
    </dict>
    <dict>
      <key>name</key>
      <string>string.quoted.triple.0.pkl</string>
      <key>begin</key>
      <string>(&quot;&quot;&quot;)</string>
      <key>end</key>
      <string>(&quot;&quot;&quot;)</string>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.delimiter.pkl</string>
        </dict>
      </dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>name</key>
          <string>constant.character.escape.0.pkl</string>
          <key>match</key>
          <string>(?x:                 # turn on extended mode
  \\
  (?:
    [trn&quot;\\]         # tab, carriage return, newline, quote, backslash
    |                # OR
    u                # the letter u
    \{               # curly opening brace literal
    [\da-fA-F]+      # 1 or more hex number literal
    }                # curly end literal
    |                # OR
    \(               # interpolation start
    .+?              # one or more characters lazily (correct syntax highlighting within here should be provided by semantic tokens)
    \)               # interpolation end
  )
  |                  # OR
  (                  # capture group: invalid escape
    \\   # the escape char
    .                # any character
  )
)</string>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>invalid.illegal.unrecognized-string-escape.pkl</string>
            </dict>
          </dict>
        </dict>
      </array>
    </dict>
    <dict>
      <key>name</key>
      <string>string.quoted.double.0.pkl</string>
      <key>begin</key>
      <string>(&quot;)</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.delimiter.pkl</string>
        </dict>
      </dict>
      <key>end</key>
      <string>(?x:
  (&quot;)         # string end
  |                     # OR
  (.?$)                 # error; unterminated string (flag last character as an error)
)</string>
      <key>endCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.delimimter.pkl</string>
        </dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>invalid.illegal.newline.pkl</string>
        </dict>
      </dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>name</key>
          <string>constant.character.escape.0.pkl</string>
          <key>match</key>
          <string>(?x:                 # turn on extended mode
  \\
  (?:
    [trn&quot;\\]         # tab, carriage return, newline, quote, backslash
    |                # OR
    u                # the letter u
    \{               # curly opening brace literal
    [\da-fA-F]+      # 1 or more hex number literal
    }                # curly end literal
    |                # OR
    \(               # interpolation start
    .+?              # one or more characters lazily (correct syntax highlighting within here should be provided by semantic tokens)
    \)               # interpolation end
  )
  |                  # OR
  (                  # capture group: invalid escape
    \\   # the escape char
    .                # any character
  )
)</string>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>invalid.illegal.unrecognized-string-escape.pkl</string>
            </dict>
          </dict>
        </dict>
      </array>
    </dict>
    <dict>
      <key>name</key>
      <string>string.quoted.triple.1.pkl</string>
      <key>begin</key>
      <string>(#&quot;&quot;&quot;)</string>
      <key>end</key>
      <string>(&quot;&quot;&quot;#)</string>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.delimiter.pkl</string>
        </dict>
      </dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>name</key>
          <string>constant.character.escape.1.pkl</string>
          <key>match</key>
          <string>(?x:                 # turn on extended mode
  \\\#
  (?:
    [trn&quot;\\]         # tab, carriage return, newline, quote, backslash
    |                # OR
    u                # the letter u
    \{               # curly opening brace literal
    [\da-fA-F]+      # 1 or more hex number literal
    }                # curly end literal
    |                # OR
    \(               # interpolation start
    .+?              # one or more characters lazily (correct syntax highlighting within here should be provided by semantic tokens)
    \)               # interpolation end
  )
  |                  # OR
  (                  # capture group: invalid escape
    \\\#   # the escape char
    .                # any character
  )
)</string>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>invalid.illegal.unrecognized-string-escape.pkl</string>
            </dict>
          </dict>
        </dict>
      </array>
    </dict>
    <dict>
      <key>name</key>
      <string>string.quoted.double.1.pkl</string>
      <key>begin</key>
      <string>(#&quot;)</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.delimiter.pkl</string>
        </dict>
      </dict>
      <key>end</key>
      <string>(?x:
  (&quot;\#)         # string end
  |                     # OR
  (.?$)                 # error; unterminated string (flag last character as an error)
)</string>
      <key>endCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.delimimter.pkl</string>
        </dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>invalid.illegal.newline.pkl</string>
        </dict>
      </dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>name</key>
          <string>constant.character.escape.1.pkl</string>
          <key>match</key>
          <string>(?x:                 # turn on extended mode
  \\\#
  (?:
    [trn&quot;\\]         # tab, carriage return, newline, quote, backslash
    |                # OR
    u                # the letter u
    \{               # curly opening brace literal
    [\da-fA-F]+      # 1 or more hex number literal
    }                # curly end literal
    |                # OR
    \(               # interpolation start
    .+?              # one or more characters lazily (correct syntax highlighting within here should be provided by semantic tokens)
    \)               # interpolation end
  )
  |                  # OR
  (                  # capture group: invalid escape
    \\\#   # the escape char
    .                # any character
  )
)</string>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>invalid.illegal.unrecognized-string-escape.pkl</string>
            </dict>
          </dict>
        </dict>
      </array>
    </dict>
    <dict>
      <key>name</key>
      <string>string.quoted.triple.2.pkl</string>
      <key>begin</key>
      <string>(##&quot;&quot;&quot;)</string>
      <key>end</key>
      <string>(&quot;&quot;&quot;##)</string>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.delimiter.pkl</string>
        </dict>
      </dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>name</key>
          <string>constant.character.escape.2.pkl</string>
          <key>match</key>
          <string>(?x:                 # turn on extended mode
  \\\#\#
  (?:
    [trn&quot;\\]         # tab, carriage return, newline, quote, backslash
    |                # OR
    u                # the letter u
    \{               # curly opening brace literal
    [\da-fA-F]+      # 1 or more hex number literal
    }                # curly end literal
    |                # OR
    \(               # interpolation start
    .+?              # one or more characters lazily (correct syntax highlighting within here should be provided by semantic tokens)
    \)               # interpolation end
  )
  |                  # OR
  (                  # capture group: invalid escape
    \\\#\#   # the escape char
    .                # any character
  )
)</string>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>invalid.illegal.unrecognized-string-escape.pkl</string>
            </dict>
          </dict>
        </dict>
      </array>
    </dict>
    <dict>
      <key>name</key>
      <string>string.quoted.double.2.pkl</string>
      <key>begin</key>
      <string>(##&quot;)</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.delimiter.pkl</string>
        </dict>
      </dict>
      <key>end</key>
      <string>(?x:
  (&quot;\#\#)         # string end
  |                     # OR
  (.?$)                 # error; unterminated string (flag last character as an error)
)</string>
      <key>endCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.delimimter.pkl</string>
        </dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>invalid.illegal.newline.pkl</string>
        </dict>
      </dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>name</key>
          <string>constant.character.escape.2.pkl</string>
          <key>match</key>
          <string>(?x:                 # turn on extended mode
  \\\#\#
  (?:
    [trn&quot;\\]         # tab, carriage return, newline, quote, backslash
    |                # OR
    u                # the letter u
    \{               # curly opening brace literal
    [\da-fA-F]+      # 1 or more hex number literal
    }                # curly end literal
    |                # OR
    \(               # interpolation start
    .+?              # one or more characters lazily (correct syntax highlighting within here should be provided by semantic tokens)
    \)               # interpolation end
  )
  |                  # OR
  (                  # capture group: invalid escape
    \\\#\#   # the escape char
    .                # any character
  )
)</string>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>invalid.illegal.unrecognized-string-escape.pkl</string>
            </dict>
          </dict>
        </dict>
      </array>
    </dict>
    <dict>
      <key>name</key>
      <string>string.quoted.triple.3.pkl</string>
      <key>begin</key>
      <string>(###&quot;&quot;&quot;)</string>
      <key>end</key>
      <string>(&quot;&quot;&quot;###)</string>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.delimiter.pkl</string>
        </dict>
      </dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>name</key>
          <string>constant.character.escape.3.pkl</string>
          <key>match</key>
          <string>(?x:                 # turn on extended mode
  \\\#\#\#
  (?:
    [trn&quot;\\]         # tab, carriage return, newline, quote, backslash
    |                # OR
    u                # the letter u
    \{               # curly opening brace literal
    [\da-fA-F]+      # 1 or more hex number literal
    }                # curly end literal
    |                # OR
    \(               # interpolation start
    .+?              # one or more characters lazily (correct syntax highlighting within here should be provided by semantic tokens)
    \)               # interpolation end
  )
  |                  # OR
  (                  # capture group: invalid escape
    \\\#\#\#   # the escape char
    .                # any character
  )
)</string>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>invalid.illegal.unrecognized-string-escape.pkl</string>
            </dict>
          </dict>
        </dict>
      </array>
    </dict>
    <dict>
      <key>name</key>
      <string>string.quoted.double.3.pkl</string>
      <key>begin</key>
      <string>(###&quot;)</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.delimiter.pkl</string>
        </dict>
      </dict>
      <key>end</key>
      <string>(?x:
  (&quot;\#\#\#)         # string end
  |                     # OR
  (.?$)                 # error; unterminated string (flag last character as an error)
)</string>
      <key>endCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.delimimter.pkl</string>
        </dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>invalid.illegal.newline.pkl</string>
        </dict>
      </dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>name</key>
          <string>constant.character.escape.3.pkl</string>
          <key>match</key>
          <string>(?x:                 # turn on extended mode
  \\\#\#\#
  (?:
    [trn&quot;\\]         # tab, carriage return, newline, quote, backslash
    |                # OR
    u                # the letter u
    \{               # curly opening brace literal
    [\da-fA-F]+      # 1 or more hex number literal
    }                # curly end literal
    |                # OR
    \(               # interpolation start
    .+?              # one or more characters lazily (correct syntax highlighting within here should be provided by semantic tokens)
    \)               # interpolation end
  )
  |                  # OR
  (                  # capture group: invalid escape
    \\\#\#\#   # the escape char
    .                # any character
  )
)</string>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>invalid.illegal.unrecognized-string-escape.pkl</string>
            </dict>
          </dict>
        </dict>
      </array>
    </dict>
    <dict>
      <key>name</key>
      <string>string.quoted.triple.4.pkl</string>
      <key>begin</key>
      <string>(####&quot;&quot;&quot;)</string>
      <key>end</key>
      <string>(&quot;&quot;&quot;####)</string>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.delimiter.pkl</string>
        </dict>
      </dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>name</key>
          <string>constant.character.escape.4.pkl</string>
          <key>match</key>
          <string>(?x:                 # turn on extended mode
  \\\#\#\#\#
  (?:
    [trn&quot;\\]         # tab, carriage return, newline, quote, backslash
    |                # OR
    u                # the letter u
    \{               # curly opening brace literal
    [\da-fA-F]+      # 1 or more hex number literal
    }                # curly end literal
    |                # OR
    \(               # interpolation start
    .+?              # one or more characters lazily (correct syntax highlighting within here should be provided by semantic tokens)
    \)               # interpolation end
  )
  |                  # OR
  (                  # capture group: invalid escape
    \\\#\#\#\#   # the escape char
    .                # any character
  )
)</string>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>invalid.illegal.unrecognized-string-escape.pkl</string>
            </dict>
          </dict>
        </dict>
      </array>
    </dict>
    <dict>
      <key>name</key>
      <string>string.quoted.double.4.pkl</string>
      <key>begin</key>
      <string>(####&quot;)</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.delimiter.pkl</string>
        </dict>
      </dict>
      <key>end</key>
      <string>(?x:
  (&quot;\#\#\#\#)         # string end
  |                     # OR
  (.?$)                 # error; unterminated string (flag last character as an error)
)</string>
      <key>endCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.delimimter.pkl</string>
        </dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>invalid.illegal.newline.pkl</string>
        </dict>
      </dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>name</key>
          <string>constant.character.escape.4.pkl</string>
          <key>match</key>
          <string>(?x:                 # turn on extended mode
  \\\#\#\#\#
  (?:
    [trn&quot;\\]         # tab, carriage return, newline, quote, backslash
    |                # OR
    u                # the letter u
    \{               # curly opening brace literal
    [\da-fA-F]+      # 1 or more hex number literal
    }                # curly end literal
    |                # OR
    \(               # interpolation start
    .+?              # one or more characters lazily (correct syntax highlighting within here should be provided by semantic tokens)
    \)               # interpolation end
  )
  |                  # OR
  (                  # capture group: invalid escape
    \\\#\#\#\#   # the escape char
    .                # any character
  )
)</string>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>invalid.illegal.unrecognized-string-escape.pkl</string>
            </dict>
          </dict>
        </dict>
      </array>
    </dict>
    <dict>
      <key>name</key>
      <string>string.quoted.triple.5.pkl</string>
      <key>begin</key>
      <string>(#####&quot;&quot;&quot;)</string>
      <key>end</key>
      <string>(&quot;&quot;&quot;#####)</string>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.delimiter.pkl</string>
        </dict>
      </dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>name</key>
          <string>constant.character.escape.5.pkl</string>
          <key>match</key>
          <string>(?x:                 # turn on extended mode
  \\\#\#\#\#\#
  (?:
    [trn&quot;\\]         # tab, carriage return, newline, quote, backslash
    |                # OR
    u                # the letter u
    \{               # curly opening brace literal
    [\da-fA-F]+      # 1 or more hex number literal
    }                # curly end literal
    |                # OR
    \(               # interpolation start
    .+?              # one or more characters lazily (correct syntax highlighting within here should be provided by semantic tokens)
    \)               # interpolation end
  )
  |                  # OR
  (                  # capture group: invalid escape
    \\\#\#\#\#\#   # the escape char
    .                # any character
  )
)</string>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>invalid.illegal.unrecognized-string-escape.pkl</string>
            </dict>
          </dict>
        </dict>
      </array>
    </dict>
    <dict>
      <key>name</key>
      <string>string.quoted.double.5.pkl</string>
      <key>begin</key>
      <string>(#####&quot;)</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.delimiter.pkl</string>
        </dict>
      </dict>
      <key>end</key>
      <string>(?x:
  (&quot;\#\#\#\#\#)         # string end
  |                     # OR
  (.?$)                 # error; unterminated string (flag last character as an error)
)</string>
      <key>endCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.delimimter.pkl</string>
        </dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>invalid.illegal.newline.pkl</string>
        </dict>
      </dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>name</key>
          <string>constant.character.escape.5.pkl</string>
          <key>match</key>
          <string>(?x:                 # turn on extended mode
  \\\#\#\#\#\#
  (?:
    [trn&quot;\\]         # tab, carriage return, newline, quote, backslash
    |                # OR
    u                # the letter u
    \{               # curly opening brace literal
    [\da-fA-F]+      # 1 or more hex number literal
    }                # curly end literal
    |                # OR
    \(               # interpolation start
    .+?              # one or more characters lazily (correct syntax highlighting within here should be provided by semantic tokens)
    \)               # interpolation end
  )
  |                  # OR
  (                  # capture group: invalid escape
    \\\#\#\#\#\#   # the escape char
    .                # any character
  )
)</string>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>invalid.illegal.unrecognized-string-escape.pkl</string>
            </dict>
          </dict>
        </dict>
      </array>
    </dict>
    <dict>
      <key>name</key>
      <string>string.quoted.triple.6.pkl</string>
      <key>begin</key>
      <string>(######&quot;&quot;&quot;)</string>
      <key>end</key>
      <string>(&quot;&quot;&quot;######)</string>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.delimiter.pkl</string>
        </dict>
      </dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>name</key>
          <string>constant.character.escape.6.pkl</string>
          <key>match</key>
          <string>(?x:                 # turn on extended mode
  \\\#\#\#\#\#\#
  (?:
    [trn&quot;\\]         # tab, carriage return, newline, quote, backslash
    |                # OR
    u                # the letter u
    \{               # curly opening brace literal
    [\da-fA-F]+      # 1 or more hex number literal
    }                # curly end literal
    |                # OR
    \(               # interpolation start
    .+?              # one or more characters lazily (correct syntax highlighting within here should be provided by semantic tokens)
    \)               # interpolation end
  )
  |                  # OR
  (                  # capture group: invalid escape
    \\\#\#\#\#\#\#   # the escape char
    .                # any character
  )
)</string>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>invalid.illegal.unrecognized-string-escape.pkl</string>
            </dict>
          </dict>
        </dict>
      </array>
    </dict>
    <dict>
      <key>name</key>
      <string>string.quoted.double.6.pkl</string>
      <key>begin</key>
      <string>(######&quot;)</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.delimiter.pkl</string>
        </dict>
      </dict>
      <key>end</key>
      <string>(?x:
  (&quot;\#\#\#\#\#\#)         # string end
  |                     # OR
  (.?$)                 # error; unterminated string (flag last character as an error)
)</string>
      <key>endCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.delimimter.pkl</string>
        </dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>invalid.illegal.newline.pkl</string>
        </dict>
      </dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>name</key>
          <string>constant.character.escape.6.pkl</string>
          <key>match</key>
          <string>(?x:                 # turn on extended mode
  \\\#\#\#\#\#\#
  (?:
    [trn&quot;\\]         # tab, carriage return, newline, quote, backslash
    |                # OR
    u                # the letter u
    \{               # curly opening brace literal
    [\da-fA-F]+      # 1 or more hex number literal
    }                # curly end literal
    |                # OR
    \(               # interpolation start
    .+?              # one or more characters lazily (correct syntax highlighting within here should be provided by semantic tokens)
    \)               # interpolation end
  )
  |                  # OR
  (                  # capture group: invalid escape
    \\\#\#\#\#\#\#   # the escape char
    .                # any character
  )
)</string>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>invalid.illegal.unrecognized-string-escape.pkl</string>
            </dict>
          </dict>
        </dict>
      </array>
    </dict>
  </array>
</dict>
</plist>
